
options(stringsAsFactors = FALSE)

is.installed <- function(RequiredPackages) {
  
  pinx <- which(RequiredPackages %in% installed.packages()[,1])
  if(length(pinx) !=0) {installPackages<- RequiredPackages[-pinx] };
  if(length(installPackages) !=0) {
  Inx <- readline(prompt= sprintf("\nThis function needs %s package(s). Whould you like to install?\n\nEnter Y or an empty line to skip install and return:\n\n", installPackages) );
  if( Inx == 'y' || Inx == 'Y' ) {
    for (i in installPackages) { # Installs packages if not yet installed
      # if (!is.element(i, installed.packages()[,1]))  
      install.packages(i)
      require(i, character.only = T)
      # }
    } } else { stop() } 
  } else {
    for (i in RequiredPackages) {
      require(i, character.only = T)
     }  
  }
  }





is.installed.bioconductor <- function(RequiredPackages) {
  pinx <- which(RequiredPackages %in% installed.packages()[,1])
  pinx <- which(RequiredPackages %in% installed.packages()[,1])
  if(length(pinx) !=0) {installPackages<- RequiredPackages[-pinx] };
  if(length(installPackages) !=0) {
  Inx <- readline(prompt= sprintf("\nThis function needs %s bioconductor package(s). Whould you like to install?\n\nEnter Y or an empty line to skip install and return", installPackages) );
  if( Inx == 'y' || Inx == 'Y' ) {
    for (i in installPackages) { # Installs packages if not yet installed
      # if (!is.element(i, installed.packages()[,1])) {
      if (!requireNamespace("BiocManager", quietly = TRUE))
        install.packages("BiocManager")
      BiocManager::install(i)
      require(i, character.only = T)
      # }
    } } else { stop() }
  } else {
    for (i in RequiredPackages) {
      require(i, character.only = T)
    }  
  }
  }



loadUrl <- function(url, downloadPath = NA, sep=c("RData"," ", "," , "\t", ";", "xls", "gsheet"), ...) {
  cat('onedrive: copy link\n googlesheet: share-> Anyone with the link\n sep: "RData", ..."xls", "gsheet"\n')
  if(!is.na(downloadPath))  { tmpFile <- downloadPath
  
  } else { tmpFile <- tempfile()  }
  url2 <- gsub("e=.*", "download=1", url)
  download.file(url2, tmpFile, mode="wb") # For windows user: mode = "wb" cf. binary
  sep <- match.arg(sep)
  if(sep == "RData") {
    print(tmpFile)
    tmpFile <-  gsub("\\\\", "/", tmpFile)
    justLoaded <- try(load(tmpFile), silent = T); 
    try(assign(justLoaded, eval(as.symbol(justLoaded)),.GlobalEnv ), silent = T);
    if(class(justLoaded)=="try-error"){ justLoaded <- try(read.delim(tmpFile, ...), silent = T); message("Need 'sep' argument, is it txt file?")  }   
  } else if(sep == "xls") {
    is.installed('readxl')
    justLoaded <- try(read_excel(tmpFile,...), silent = T)
    
  } else if(sep == "gsheet") {
    is.installed('gsheet')
    cat('gsheet should be public, click share-> Anyone with the link')
    justLoaded <- gsheet2tbl(url,...)
  } else {
    justLoaded <- try(read.delim(tmpFile, sep=sep, ...), silent = T)  
  }
  justLoaded 
}



peep <- function(x, boxplot = F ) { 
if(is.null(dim(x))) { if(length(x) > 10)  { print(x[1:10]) } else { print(x) }  } else if (dim(x)[1] >=10 && dim(x)[2]>=5 ){ print(x[1:5, 1:3]); boxplot(x[1:5, 1:3]) } else {print(head(x)); boxplot(x)} }



normalize.q <- function(x= data.frame(matrix(sample(12, replace = T), 4)), filter.sd.quantile = 0.1, tied = c("average", "min", "max"), verbose = T ) {
  # compare to normalize.quantiles, 1. accept data.frame 2. tie control option:"average", "min", "max"  3. sd.filter 4. peep & plot & verbose...
 
  x <- x[rowSums(x)>0, ]  
  x <- x[apply(x,1,sd) >= quantile(apply(x,1,sd), filter.sd.quantile), ]  
  cat(sprintf("\nrowSums(x)==0, =<quantile(sd(row), %s) were filtered\n\n", filter.sd.quantile))

  tied <- match.arg(tied)  
  rank <- apply(x, 2, rank,ties.method="min"); 
  if(any(tied %in% c("average", "max"))) rank.max <- apply(x, 2, rank,ties.method="max"); 
  sorted <- apply(x, 2, sort)
  sorted.row.mean <- apply(sorted, 1, mean); 
  x2 <- apply(rank, 2, function(x) sorted.row.mean[x])
  if(any(tied %in% c("average", "max"))) x2.max <- apply(rank.max, 2, function(x) sorted.row.mean[x])
  if(tied=="average") { x2 <- (x2+x2.max)/2 } else if (tied=="max"){x2 <- x2.max } else { }
  
  if( class(x) == "data.frame") { x2 <- as.data.frame(x2); rownames(x2) <- rownames(x) }
  if(verbose) {
    op <- par(no.readonly = T); par(mfrow=c(1,2), mar=c(3,3,1,1))
    cat('Original matrix or data.frame\n'); peep(x, T)
    cat('Sort the original matrix from lowest to highest\n'); peep(rank)
    cat('Determine the ranks of original matix\n');peep(sorted)
    cat('\nCalculate the means\n\n'); peep(sorted.row.mean)
    cat('\n\nFinally substitute the means into our ranked matrix\n'); peep(x2, T)
    cat(sprintf('If the values were tied, %s is used\n\n', tied))
    par(op)
    'In the example on Wikipedia, if the values were tied, the min value is used but in the normalize.quantiles() function, the average is used'
  }
  x2
}



DEGs <- function(Exp, cl, adj.pval = 0.1,  logFC = 2, geomTextN=5, heatmapUpN = 25, plotDEG =T, multipleRegression=F, rowCounts=F, meanFilter=10, PDF=T, cname='temp', show_column_names=T, rect_gp = gpar(col = NA, lty = 1, lwd = 0.2)) {
  try(dev.off(), silent = T)
  
  is.installed(c('ggplot2', 'ggrepel'))
  is.installed.bioconductor(c('limma', 'ComplexHeatmap'))
  
  
  if(rowCounts) { Exp <- Exp[apply(Exp, 1, mean) > meanFilter, ]; Exp <- voom(Exp, plot = T) }
  
  if(multipleRegression) { fit <-eBayes(lmFit(Exp, model.matrix(~ .,cl))); print(topTable(fit, 2))                                     } else {
    fit <-eBayes(lmFit(Exp, model.matrix(~ .,cl[, 1, drop=F]))); print(topTable(fit, 2)) } 
  
  tT <- topTable(fit, number = dim(Exp)[1])
  tT$Gene <- rownames(tT)
  tT.up <- tT[order(tT$logFC, decreasing = T ),]; tT.down<- tT[order(tT$logFC),]
  tT.filter <- data.frame(tT[inx<-(tT$adj.P.Val<adj.pval) & (abs(tT$logFC) > logFC ), ]); print(tT.filter)
  
  if(PDF) {
    pdf(file = file.path(getwd(),sprintf("%s.pdf", cname )), width=5, height=5)  }
  if(plotDEG) {
    if(rowCounts) Exp <- Exp$E
    
    if(any(colnames(tT) == "logFC" && dim(tT.filter)[1] != 0) ) {
      require(ggplot2); require(ggrepel)
      tT$Cutoff_value <- c("Not Sig", sprintf("FDR < %s & logFC > %s", adj.pval, logFC))[as.numeric(inx)+1]
      gplot <- ggplot(tT, aes(x = logFC, y = -log10(adj.P.Val))) + geom_point(aes(color = Cutoff_value)) + labs(title ="c") + scale_color_manual(values = c("red", "grey")) +  theme_bw(base_size = 12) + theme(legend.position = "bottom") + geom_hline(yintercept= -log10(adj.pval), linetype="dashed", color = "#FF000050") + geom_vline(xintercept= c(logFC, -logFC), linetype="dashed", color = "#FF000050") 
      
      g <- gplot + geom_text_repel(    
        data = dd <- rbind(tT.up[1:geomTextN, ], tT.down[1:geomTextN, ]),
        aes(label = Gene),
        size = 3,
        box.padding = unit(0.35, "lines"),
        point.padding = unit(0.3, "lines")
      ) }
    print(g)
    
    if(dim(Exp)[1] >= heatmapUpN*2 ) {
      bluered <- colorRampPalette(c("blue", "white", "red"))(256)
      # stats::heatmap(Exp[rbind(tT.down[1:heatmapUpN, ],tT.up[heatmapUpN:1, ])$Gene,], col = bluered, scale = "row", main = sprintf("top%s", heatmapUpN*2), Colv = NA, Rowv=NA    )
      
      # if(HUGO) { colnames(d)[1:dim(matGS)[1]] <- .mapid(colnames(d)[1:dim(matGS)[1]]) }
      
      colse=c("#00000020", "#000000", "#0000BF10", "#0000BF30", "#0000BF50", "#0000BF70","#0000BF90","#0000BF")
      colTemp <- colse[as.numeric(as.factor(cl[,1]))]
      names(colTemp ) <- cl[,1]
      colTemp<-list(colTemp); names(colTemp) <- colnames(cl)[1] 
      


      h <- Heatmap( t(scale(t(d<-Exp[rbind(tT.up[1:heatmapUpN, ], tT.down[heatmapUpN:1, ])$Gene,]))),  col = bluered, name="Exprs", rect_gp = rect_gp, cluster_rows = T, cluster_columns = T, show_row_names = T, show_column_names=show_column_names, row_names_gp =gpar(fontsize = 5), split = data.frame(cyl = factor(c(rep('UP', heatmapUpN), rep('DOWN', heatmapUpN)), levels=c('UP','DOWN' ))),gap = unit(1.5, "mm"), top_annotation = HeatmapAnnotation(df=cl, col=colTemp , annotation_name_side ='left' ) ) 

      draw(h)
    }
  }
  if(PDF) { dev.off() 
  }
  return(list(fit = fit, tT.filter= tT.filter, tT.up=tT.up, tT.down=tT.down))

  }









GSARPathway <- function (object, group, name = NULL, cor.method = "pearson", 
          min.sd = 0.001, legend.size = 1, leg.x = -0.8, leg.y = 1.5, 
          return.weights = FALSE, group1.name = "Group 1", group2.name = "Group 2", 
          label.size = 1, label.color = "black", label.dist = 0.5, 
          vertex.size = 8, vertex.label.font = 1, edge.width = 1) 
{
  is.installed(c('igraph'))
  
  if (!(is.matrix(object))) 
    stop("'object' must be a matrix where rows are features \n            and columns are samples")
  if (is.null(group)) 
    stop("'group' must be a vector indicating group association. \n            Possible values are 1 and 2")
  nv <- ncol(object)
  if (length(group) != nv) 
    stop("length of 'group' must equal the number of columns in 'object'")
  if (sum(group %in% c(1, 2)) < nv) 
    stop("all members in 'group' must have values 1 or 2")
  if ((sum(group == 1) < 3) || (sum(group == 2) < 3)) 
    stop("there are less than 3 samples in at least one group")
  if (!(cor.method %in% c("pearson", "spearman", "kendall"))) 
    stop("'cor.method' must be a character string indicating which \n            correlation coefficient to be calculated. One of 'pearson' \n                (default), 'spearman' or 'kendall'")
  if (!is.logical(return.weights)) 
    stop("'return.weights' must be a logical parameter")
  object <- object[, c(which(group == 1), which(group == 2))]
  nv1 <- sum(group == 1)
  if (length(rownames(object)) < nrow(object)) 
    gnames <- as.character(c(1:nrow(object)))
  else gnames <- rownames(object)
  objt <- aperm(object, c(2, 1))
  group1 <- objt[1:nv1, ]
  group2 <- objt[(nv1 + 1):nv, ]
  sd1 <- apply(group1, 2, "sd")
  sd2 <- apply(group2, 2, "sd")
  if (sum(sd1 < min.sd) == 1) 
    stop(paste("feature ", which(sd1 < min.sd), " has a standard deviation \n            smaller than 'min.sd' in group 1", 
               sep = ""))
  if (sum(sd2 < min.sd) == 1) 
    stop(paste("feature ", which(sd2 < min.sd), " has a standard deviation \n            smaller than 'min.sd' in group 2", 
               sep = ""))
  if (sum(sd1 < min.sd) > 1) 
    stop(paste("there are ", sum(sd1 < min.sd), " features with standard \n            deviation smaller than ", 
               min.sd, " in group 1", sep = ""))
  if (sum(sd2 < min.sd) > 1) 
    stop(paste("there are ", sum(sd2 < min.sd), " features with standard \n            deviation smaller than ", 
               min.sd, " in group 2", sep = ""))
  cormat1 <- abs(cor(group1, method = cor.method))
  cormat2 <- abs(cor(group2, method = cor.method))
  e1 <- eigen(cormat1)
  e2 <- eigen(cormat2)
  p1 <- matrix(abs(e1$vectors[, 1]))
  p2 <- matrix(abs(e2$vectors[, 1]))
  p1 <- p1 * norm(p1)
  p2 <- p2 * norm(p2)
  colnames(p1) <- "class1"
  colnames(p2) <- "class2"
  rownames(p1) <- rownames(p2) <- gnames
  major1.val <- max(p1)
  major2.val <- max(p2)
  major1.ind <- which.max(p1)
  major2.ind <- which.max(p2)
  
  
  findMST2 <-  function (object, cor.method = "pearson", min.sd = 0.001, return.MST2only = TRUE) 
  {
    if (!(is.matrix(object))) 
      stop("'object' must be a matrix where rows are features and \n            columns are samples")
    if (!(cor.method %in% c("pearson", "spearman", "kendall"))) 
      stop("'cor.method' must be a character string indicating which \n            correlation coefficient to be calculated. \n                One of 'pearson' (default), 'spearman' or 'kendall'")
    if (is.null(rownames(object))) 
      rownames(object) <- as.character(c(1:nrow(object)))
    objt <- aperm(object, c(2, 1))
    sdf <- apply(objt, 2, "sd")
    if (sum(sdf < min.sd) == 1) 
      stop(paste("feature ", which(sdf < min.sd), " has a standard \n            deviation smaller than 'min.sd'", 
                 sep = ""))
    if (sum(sdf < min.sd) > 1) 
      stop(paste("there are ", sum(sdf < min.sd), " features with standard \n            deviation smaller than ", 
                 min.sd, sep = ""))
    distmat <- 1 - abs(cor(objt, method = cor.method))
    gr <- graph_from_adjacency_matrix(distmat, weighted = TRUE, 
                                      mode = "undirected")
    first.mst <- mst(gr)
    mst1.matrix <- as_adjacency_matrix(first.mst, attr = "weight", 
                                       sparse = FALSE)
    distmat2 <- distmat - mst1.matrix
    gr2 <- graph_from_adjacency_matrix(distmat2, weighted = TRUE, 
                                       mode = "undirected")
    second.mst <- mst(gr2)
    mst2.matrix <- as_adjacency_matrix(second.mst, attr = "weight", 
                                       sparse = FALSE)
    MST2.matrix <- mst1.matrix + mst2.matrix
    MST2 <- graph_from_adjacency_matrix(MST2.matrix, weighted = TRUE, 
                                        mode = "undirected")
    if (return.MST2only) 
      MST2
    else list(MST2 = MST2, first.mst = first.mst, second.mst = second.mst)
  }
  
  
  MST2.group1 <- findMST2(object[, c(1:nv1)], cor.method, min.sd, 
                          TRUE)
  MST2.group2 <- findMST2(object[, c((nv1 + 1):nv)], cor.method, 
                          min.sd, TRUE)
  V(MST2.group1)$color <- V(MST2.group2)$color <- "red4"
  V(MST2.group1)$color[p1 < 1.5] <- "red"
  V(MST2.group2)$color[p2 < 1.5] <- "red"
  V(MST2.group1)$color[p1 < 1.25] <- "orange"
  V(MST2.group2)$color[p2 < 1.25] <- "orange"
  V(MST2.group1)$color[p1 < 1] <- "yellow"
  V(MST2.group2)$color[p2 < 1] <- "yellow"
  V(MST2.group1)$color[p1 < 0.75] <- "gray"
  V(MST2.group2)$color[p2 < 0.75] <- "gray"
  V(MST2.group1)$color[p1 < 0.5] <- "ghostwhite"
  V(MST2.group2)$color[p2 < 0.5] <- "ghostwhite"
  V(MST2.group1)$label.color <- label.color
  V(MST2.group2)$label.color <- label.color
  par(mfrow = c(1, 2), mar = c(1, 2, 12, 2), oma = c(1, 1, 
                                                     4, 1), cex = 0.7)
  plot(MST2.group1, vertex.label.font = vertex.label.font, 
       vertex.label = gnames, vertex.label.cex = label.size, 
       vertex.label.dist = label.dist, vertex.size = vertex.size, 
       edge.width = edge.width, layout = layout.fruchterman.reingold)
  title(paste(group1.name, "\n", "Hub Gene (", group1.name, 
              "):   ", gnames[major1.ind], "\n", "Weight Factor:   ", 
              floor(1000 * major1.val)/1000, "\n", "Hub Gene (", group2.name, 
              "):   ", gnames[major2.ind], "\n", "Weight Factor:   ", 
              floor(1000 * p1[gnames[major2.ind], ])/1000, "\n", "\n", 
              "\n", "\n", "\n", sep = ""))
  par(xpd = NA)
  legend(x = leg.x, y = leg.y, cex = legend.size, legend = c("w>1.5", 
                                                             "1.25<w<1.5", "1<w<1.25", "0.75<w<1", "0.5<w<0.75", "w<0.5"), 
         fill = c("red4", "red", "orange", "yellow", "gray", "ghostwhite"), 
         horiz = TRUE)
  plot(MST2.group2, vertex.label.font = vertex.label.font, 
       vertex.label = gnames, vertex.label.cex = label.size, 
       vertex.label.dist = label.dist, vertex.size = vertex.size, 
       edge.width = edge.width, layout = layout.fruchterman.reingold)
  title(paste(group2.name, "\n", "Hub Gene (", group2.name, 
              "):   ", gnames[major2.ind], "\n", "Weight Factor:   ", 
              floor(1000 * major2.val)/1000, "\n", "Hub Gene (", group1.name, 
              "):   ", gnames[major1.ind], "\n", "Weight Factor:   ", 
              floor(1000 * p2[gnames[major1.ind], ])/1000, "\n", "\n", 
              "\n", "\n", "\n", sep = ""))
  if (!(is.null(name))) 
    mtext(paste("Pathway: ", name, sep = ""), cex = legend.size, 
          outer = TRUE, line = 2)
  mtext(paste("There are ", length(gnames), " genes in this pathway", 
              sep = ""), cex = legend.size, outer = TRUE, line = 0)
  if (return.weights) 
    return(cbind(p1, p2))
}








